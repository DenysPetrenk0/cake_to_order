export const setupContactPlaceholder = () => {
	const selectCommunication = document.querySelector("#form_communication");
	const inputContact = document.querySelector("#input_contact");

	if (!selectCommunication || !inputContact) return;

	const placeholderText = {
		tel: '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É',
		instagram: '–í–≤–µ–¥—ñ—Ç—å Instagram –Ω—ñ–∫',
		viber: '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É Viber',
		telegram: '–í–≤–µ–¥—ñ—Ç—å Telegram –Ω—ñ–∫ –∞–±–æ –Ω–æ–º–µ—Ä',
		discord: '–í–≤–µ–¥—ñ—Ç—å Discord –Ω—ñ–∫'
	};

	selectCommunication.addEventListener("change", function () {
		inputContact.placeholder = placeholderText[this.value] || '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ';
		inputContact.type = this.value === "tel" || this.value === 'viber' ? 'tel' : 'text';
		inputContact.disabled = !this.value;
	});
};

const closeModal = (event) => {
	const backDrop = document.querySelector(".backdrop");
	event.preventDefault();
	backDrop.classList.add("is-hidden");
	backDrop.innerHTML = "";
}

const showResModal = (text) => {
	const backDrop = document.querySelector(".backdrop");

	backDrop.innerHTML = `
		<a href="#" class="modal__close">
			<svg class="modal__icon">
				<use href="./assets/icon/sprite.svg#cross"></use>
			</svg>
		</a>
		<div class="modal__alert__box">
			<p class="modal__alert__text">${text}</p>
			<button type="submit" id="modalCloseBtn">–î–æ–±—Ä–µ</button>
		</div>
	`;
	backDrop.classList.remove("is-hidden");

	const closeBtn = backDrop.querySelector(".modal__close");
	const okBtn = backDrop.querySelector("#modalCloseBtn");

	closeBtn.addEventListener("click", closeModal);
	okBtn.addEventListener("click", closeModal);
}

	const isValidPhoneNumber = (number) => {
		const phoneRegex = /^(?:\d{10}|380\d{9})$/;
		return phoneRegex.test(number);
	};

export const setOrder = () => {
	document.getElementById("orderForm").addEventListener("submit", async function(event) {
		event.preventDefault();

		const name = this.querySelector("[name='name']").value.trim();
		const contact = this.querySelector("[name='contact']").value.trim();
		const communication = this.querySelector("[name='communication']").value.trim();

		if (!name || !contact || !communication) {
			showResModal("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è!");
			return;
		}

		if (communication === 'tel' && !isValidPhoneNumber(contact)) {
			showResModal("–ù–µ–≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–æ–º–µ—Ä —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!");
			return;
		}

		const botToken = "7821261671:AAFWNRfaHrKhqmCA7DqhsM3FoXxInLbpNEE";
		const chatId = "854901237";
		const formData = new FormData(this);

		const text = `
		üîî *–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!*  
		üë§ *–Ü–º'—è:* ${formData.get('name')} ${formData.get('last_name')}  
		üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* ${formData.get('contact')}  
		üì° *–ó–≤'—è–∑–æ–∫:* ${formData.get('communication')}  
		üìã *–î–µ—Ç–∞–ª—ñ:* ${formData.get('description') || '–ù–µ–º–∞—î'}
		`;

		const url = `https://api.telegram.org/bot${botToken}/sendMessage`;


		try	{
			const response = await fetch(url, {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ chat_id: chatId, text, parse_mode: "Markdown" })
			});

			if (response.ok) {
				showResModal("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!");
				this.reset();
			} else {
				showResModal("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
			}

		} catch (error) {
			showResModal("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—ñ—Ä–Ω—ñ—Å—Ç—å –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —É—Å—ñ—Ö –ø–æ–ª—ñ–≤")
		}
	});
};
